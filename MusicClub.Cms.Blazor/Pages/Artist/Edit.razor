@page "/artist/edit/{id:int}"

@layout ArtistLayout

@inject IArtistService ArtistApiService
@inject NavigationManager NavigationManager
@inject DataControllerService DataControllerService
@inject MemoryService MemoryService

<h3>Edit</h3>

<ArtistCreateEditForm ArtistFormModel="artistFormModel" OnValidSubmit="() => Post()">
    <Buttons>
        <button type="submit">Submit</button>

        <button type="button" @onclick="async () => {MemoryService.HasUnsavedData = false; await FetchArtist(Id);}" class="warning">Undo changes</button>

        <NavLink href="@($"artist/delete/{Id}")" class="button danger">Delete</NavLink>
    </Buttons>
</ArtistCreateEditForm>


@code {
    [Parameter]
    public int Id { get; set; }

    [CascadingParameter]
    public bool IsOpen { get; set; }

    private EditContext? artistEditContext;

    private ArtistFormModel? artistFormModel { get; set; }

    private PagedServiceResult<IList<PersonResult>>? peoplePagedServiceResult { get; set; }
    private PagedServiceResult<IList<ImageResult>>? imagesPagedServiceResult { get; set; }

    protected override void OnInitialized()
    {
        var artistServiceResult = (ServiceResult<ArtistResult>?)DataControllerService.Data;
        if (artistServiceResult?.Data is { } artistResult)
        {
            artistFormModel = new()
                {
                    ImageId = artistResult.Image?.Id,
                    ImageResult = artistResult.Image,
                    PersonId = artistResult.Person?.Id,
                    PersonResult = artistResult.Person,
                    Alias = artistResult.Alias
                };

            artistEditContext = new(artistFormModel);
        }
        else
        {
            artistFormModel = new();
            artistEditContext = new EditContext(artistFormModel);
        }

        base.OnInitialized();
    }

    private async Task FetchArtist(int id)
    {
        var artistServiceResult = await ArtistApiService.Get(id);

        if (artistServiceResult?.Data is { } artistResult)
        {
            artistFormModel = new ArtistFormModel
                {
                    ImageId = artistResult.Image?.Id,
                    ImageResult = artistResult.Image,
                    PersonId = artistResult.Person?.Id,
                    PersonResult = artistResult.Person,
                    Alias = artistResult.Alias
                };

        }
    }


    private async Task Post()
    {
        if (IsOpen)
        {
            return;
        }


        if (artistFormModel?.PersonId is null)
        {
            return;
        }

        var serviceResult = await ArtistApiService.Update(Id, new ArtistRequest { PersonId = (int)artistFormModel.PersonId, ImageId = artistFormModel.ImageId, Alias = artistFormModel.Alias });
        if (serviceResult.Messages is null)
        {
            MemoryService.HasUnsavedData = false;

            NavigationManager.NavigateTo("/artist");

            // NavigationManager.NavigateTo("artist" + NavigationManager.GetQueryString());
        }
    }



}
