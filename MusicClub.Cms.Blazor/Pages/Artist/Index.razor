@page "/artist"

@layout ArtistLayout

@implements IDisposable

@inject IArtistService ArtistApiService
@inject NavigationManager NavigationManager
@inject DataControllerService DataControllerService
@inject MemoryService MemoryService


<h3>Index</h3>

<NavLink class="button" href="artist/create">Create</NavLink>

<ArtistFilterForm EditContext="editContext" OnValidSubmit="() => FetchArtists(new PaginationRequest { Page = MemoryService.ArtistPagination?.Page ?? MemoryService.DefaultPage, PageSize = MemoryService.ArtistPagination?.PageSize ?? MemoryService.DefaultPageSize}, (ArtistFilter)editContext?.Model ?? new ArtistFilter())" />

@if (ArtistsPagedServiceResult is not null)
{
<PagedList OnPageChanged="@(async (model) => { MemoryService.ArtistPagination = model; await FetchArtists(new PaginationRequest { Page = model.Page, PageSize = model.PageSize}, MemoryService.ArtistFilter);})"
           PagedServiceResult="ArtistsPagedServiceResult" Context="ArtistResult">
    <ItemTemplate>
        <div>
            @if (ArtistResult.Image is not null)
            {
                <img src="@($"https://localhost:7061/image/download/{ArtistResult.Image?.Id}")" />

            }

            @if (!string.IsNullOrWhiteSpace(ArtistResult.Alias))
            {
                <h4>@ArtistResult.Alias</h4>
            }
            else if (ArtistResult.Person is not null)
            {
                <h4>@ArtistResult.Person.Firstname @ArtistResult.Person.Lastname</h4>
            }

            <NavLink href="@($"artist/edit/{ArtistResult.Id}")" class="button">Edit</NavLink>
        </div>
    </ItemTemplate>
</PagedList>
}
else
{
<Spinner />
}


@code {
    private PagedServiceResult<IList<ArtistResult>>? ArtistsPagedServiceResult;

private int page;

private EditContext? editContext { get; set; }

protected override void OnInitialized()
{
    editContext = new(MemoryService.ArtistFilter);

    ArtistsPagedServiceResult = (PagedServiceResult<IList<ArtistResult>>?)DataControllerService.Data;

    base.OnInitialized();
}

private async Task FetchArtists(PaginationRequest paginationRequest, ArtistFilter artistFilter)
{
    DataControllerService.Data = null;

    ArtistsPagedServiceResult = await ArtistApiService.GetAll(paginationRequest, artistFilter);
}


public void Dispose()
{
    DataControllerService.Data = null;
}
}
