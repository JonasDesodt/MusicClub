@page "/artist"

@layout ArtistLayout

@implements IDisposable

@inject IArtistService ArtistApiService
@inject NavigationManager NavigationManager
@inject DataController DataControllerService
@inject MemoryService MemoryService

<section class="index-page">
    <h3>Index</h3>

    <NavLink class="button" href="artist/create">Create</NavLink>

    <ArtistFilterForm EditContext="filterContext"
                      OnReset="() => FetchArtists(MemoryService.GetDefaultPaginationRequest(), new ArtistFilter())"
                      OnValidSubmit="() => FetchArtists(MemoryService.GetDefaultPaginationRequest(), (ArtistFilter?)filterContext?.Model ?? new ArtistFilter())" />
    @if (ArtistsPagedServiceResult is not null)
    {

        <PagedList OnPageChanged="@(async (request) => { await FetchArtists(request, ArtistsPagedServiceResult.Filter);  })"
                   PagedServiceResult="ArtistsPagedServiceResult" Context="ArtistResult">
            <ItemTemplate>
                <div>
                    @if (ArtistResult.Image is not null)
                    {
                        <img src="@($"https://localhost:7061/image/download/{ArtistResult.Image?.Id}")" />

                    }
                    else
                    {
                        <p>no image</p>
                    }

                    <div>
                        @if (!string.IsNullOrWhiteSpace(ArtistResult.Alias))
                        {
                            <h4>@ArtistResult.Alias</h4>

                            @if (ArtistResult.Person is not null)
                            {
                                <p>(@ArtistResult.Person.Firstname @ArtistResult.Person?.Lastname)</p>
                            }
                        }
                        else if (ArtistResult.Person is not null)
                        {
                            <h4>@ArtistResult.Person.Firstname @ArtistResult.Person.Lastname</h4>
                        }

                        <NavLink href="@($"artist/edit/{ArtistResult.Id}")" class="button">Edit</NavLink>
                    </div>
                </div>
            </ItemTemplate>
        </PagedList>
    }
</section>

@code {
    private PagedServiceResult<IList<ArtistResult>, ArtistFilter>? ArtistsPagedServiceResult;

    private EditContext? filterContext { get; set; }

    protected override void OnInitialized()
    {
        ArtistsPagedServiceResult = (PagedServiceResult<IList<ArtistResult>, ArtistFilter>?)DataControllerService.Data;

        if (ArtistsPagedServiceResult is null) return;

        //Create a new ArtistFilter instance to prevent binding the ArtistFilter properties in the form to the ArtistFilter properties in the PagedServiceResult
        filterContext = new(ArtistsPagedServiceResult.Filter.GetCopy());

        base.OnInitialized();
    }

    private async Task FetchArtists(PaginationRequest paginationRequest, ArtistFilter artistFilter)
    {
        ArtistsPagedServiceResult = await DataControllerService.Fetch<PagedServiceResult<IList<ArtistResult>, ArtistFilter>>(async () => await ArtistApiService.GetAll(paginationRequest, artistFilter));

        MemoryService.ArtistFilter = ArtistsPagedServiceResult.Filter;
        MemoryService.ArtistPagination = ArtistsPagedServiceResult.Pagination;

        filterContext = new(ArtistsPagedServiceResult.Filter.GetCopy());
    }

    public void Dispose()
    {
        DataControllerService.Data = null;
    }
}
