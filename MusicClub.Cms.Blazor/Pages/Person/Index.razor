@page "/person"

@layout PersonCrudLayout

@implements IDisposable

@inject IPersonService PersonApiService
@inject NavigationManager NavigationManager
@inject DataController DataControllerService
@inject MemoryService MemoryService

<section class="index-page">
    <h3>Index</h3>

    <NavLink class="button" href="person/create">Create</NavLink>

    <Filters TFilterRequest="PersonFilterRequest"
             TFilterFormModel="PersonFilterFormModel"
             EditContext="filterContext"
             OnReset="() => FetchPeople(MemoryService.GetDefaultPaginationRequest(), new PersonFilterRequest())"
             OnValidSubmit="() => FetchPeople(MemoryService.GetDefaultPaginationRequest(), ((PersonFilterFormModel?)filterContext?.Model)?.ToRequest() ?? new PersonFilterRequest())"
             Context="FilterFormModel">
        <Inputs>
            <div>
                <label for="firstname">Firstname</label>

                <InputText @bind-Value="FilterFormModel.Firstname" id="firstname" />
            </div>

            <div>
                <label for="lastname">Lastname</label>

                <InputText @bind-Value="FilterFormModel.Lastname" id="lastname" />
            </div>
        </Inputs>
    </Filters>

    @if (ImagesPagedServiceResult is not null)
    {

        <PagedList OnPageChanged="@(async (request) => { await FetchPeople(request, ImagesPagedServiceResult.Filter.ToRequest());  })"
                   PagedServiceResult="ImagesPagedServiceResult" Context="PersonResult">
            <ItemTemplate>
                <div>
                    @if (PersonResult.ImageResult is not null)
                    {
                        <img src="@($"https://localhost:7061/image/download/{PersonResult.ImageResult?.Id}")" />

                    }
                    else
                    {
                        <p>no image</p>
                    }

                    <div>
                        <h4>@PersonResult.Firstname @PersonResult.Lastname</h4>

                        <NavLink href="@($"person/edit/{PersonResult.Id}")" class="button">Edit</NavLink>
                    </div>
                </div>
            </ItemTemplate>
        </PagedList>
    }
</section>


@code {
    private PagedServiceResult<IList<PersonResult>, PersonFilterResult>? ImagesPagedServiceResult;

    private EditContext? filterContext { get; set; }

    protected override void OnInitialized()
    {
        ImagesPagedServiceResult = (PagedServiceResult<IList<PersonResult>, PersonFilterResult>?)DataControllerService.Data;

        if (ImagesPagedServiceResult is null) return;

        //Create a new PersonFilter instance to prevent binding the PersonFilter properties in the form to the PersonFilter properties in the PagedServiceResult
        filterContext = new(ImagesPagedServiceResult.Filter.ToFormModel());

        base.OnInitialized();
    }

    private async Task FetchPeople(PaginationRequest paginationRequest, PersonFilterRequest personFilterRequest)
    {
        ImagesPagedServiceResult = await DataControllerService.Fetch<PagedServiceResult<IList<PersonResult>, PersonFilterResult>>(async () => await PersonApiService.GetAll(paginationRequest, personFilterRequest));

        MemoryService.Set(ImagesPagedServiceResult.Filter);
        MemoryService.Set(ImagesPagedServiceResult.Pagination);

        filterContext = new(ImagesPagedServiceResult.Filter.ToFormModel());
    }

    public void Dispose()
    {
        DataControllerService.Data = null;
    }
}