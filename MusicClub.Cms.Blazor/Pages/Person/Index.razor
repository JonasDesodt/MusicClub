@page "/person"

@implements IDisposable

@inject MemoryService MemoryService
@inject IPersonService PersonApiService
@inject DataControllerService DataControllerService

<h3>Index</h3>

<PagedList OnPageChanged="@(async (model) => { MemoryService.ArtistPagination = model; await FetchPeople(new PaginationRequest { Page = model.Page, PageSize = model.PageSize}, MemoryService.PersonFilter);})"
           PagedServiceResult="PeoplePagedServiceResult" Context="PersonResult">
    <ItemTemplate>
        <div>
            <h4>@PersonResult.Firstname @PersonResult.Lastname</h4>

            <NavLink href="@($"person/edit/{PersonResult.Id}")" class="button">Edit</NavLink>
        </div>
    </ItemTemplate>
</PagedList>

@code {
    private PagedServiceResult<IList<PersonResult>, PersonFilter>? PeoplePagedServiceResult;

    protected override void OnInitialized()
    {
        // editContext = new(MemoryService.ArtistFilter);

        PeoplePagedServiceResult = (PagedServiceResult<IList<PersonResult>, PersonFilter>?)DataControllerService.Data;

        // if (PeoplePagedServiceResult is null) return;

        // editContext = new(PeoplePagedServiceResult.Filter);

        base.OnInitialized();
    }


    private async Task FetchPeople(PaginationRequest paginationRequest, PersonFilter personFilter)
    {
        PeoplePagedServiceResult = await DataControllerService.Fetch<PagedServiceResult<IList<PersonResult>, PersonFilter>>(async () => await PersonApiService.GetAll(paginationRequest, personFilter));
  
        // editContext = new(PeoplePagedServiceResult.Filter);
    }

    public void Dispose()
    {
        DataControllerService.Data = null;
    }
}
