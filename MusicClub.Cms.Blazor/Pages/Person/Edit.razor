@page "/person/edit/{id:int}"

@layout PersonLayout

@inject IPersonService PersonApiService
@inject NavigationManager NavigationManager
@inject DataController DataController
@inject MemoryService MemoryService

<h3>Edit person</h3>

<PersonCreateEditForm PersonFormModel="personFormModel" OnValidSubmit="() => Post()">
    <Buttons>
        <button type="submit">Submit</button>

        <button type="button" @onclick="async () => {MemoryService.HasUnsavedData = false; await FetchPerson(Id);}" class="warning">Undo changes</button>

        <NavLink href="@($"person/delete/{Id}")" class="button danger">Delete</NavLink>
    </Buttons>
</PersonCreateEditForm>

@code {
    [Parameter]
    public int Id { get; set; }

    [CascadingParameter]
    public bool IsOpen { get; set; }

    private PersonFormModel? personFormModel { get; set; }

    private PagedServiceResult<IList<ImageResult>, ImageFilterResult>? imagesPagedServiceResult { get; set; }

    protected override void OnInitialized()
    {
        var personServiceResult = (ServiceResult<PersonResult>?)DataController.Data;
        if (personServiceResult?.Data is { } personResult)
        {
            personFormModel = personResult.ToFormModel();
        }

        base.OnInitialized();
    }

    private async Task FetchPerson(int id)
    {
        var personServiceResult = await DataController.Fetch(async () => await PersonApiService.Get(id));

        if (personServiceResult?.Data is { } personResult)
        {
            personFormModel = personResult.ToFormModel();
        }
    }

    private async Task Post()
    {
        if (IsOpen)
        {
            return;
        }

        if (personFormModel?.ToRequest() is not { } personRequest)
        {
            return;
        }

        var serviceResult = await DataController.Fetch(async () => await PersonApiService.Update(Id, personRequest));
        if (serviceResult.Messages is null)
        {
            MemoryService.HasUnsavedData = false;

            NavigationManager.NavigateTo("/person");
        }
    }
}