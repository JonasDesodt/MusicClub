@page "/performance"

@layout PerformanceCrudLayout

@implements IDisposable

@inject IPerformanceService PerformanceApiService
@inject NavigationManager NavigationManager
@inject DataController DataControllerService
@inject MemoryService MemoryService

@if (filterEditContext is { Model : not null, Model : PerformanceFilterFormModel } editContext)
{
    <section class="index-page @(showImageDataResultOptions ? "select-open" : "select-closed")">
        <h3>Index</h3>

        <NavLink class="button" href="performance/create">Create</NavLink>

        <Filters TFilterRequest="PerformanceFilterRequest"
                 TFilterFormModel="PerformanceFilterFormModel"
                 EditContext="editContext"
                 OnReset="() => FetchPerformances(MemoryService.GetDefaultPaginationRequest(), new PerformanceFilterRequest())"
                 OnValidSubmit="() => FetchPerformances(MemoryService.GetDefaultPaginationRequest(), ((PerformanceFilterFormModel)editContext.Model).ToRequest() ?? new PerformanceFilterRequest())"
                 Context="FilterFormModel">
            <Inputs>
                <div>
                    <label for="instrument">Instrument</label>

                    <InputText @bind-Value="FilterFormModel.Instrument" id="instrument" />
                </div>

                <ImageDataResultSelect DataResult="FilterFormModel.ImageResult"
                                       Context="ImageResult"
                                       OnDataRequest="() => showImageDataResultOptions = true"
                                       OnRemoveRequest="() => { FilterFormModel.ImageId = null; FilterFormModel.ImageResult = null; MemoryService.HasUnsavedData = true; }"
                                       @bind-Value="FilterFormModel.ImageId">
                    <Info>
                        <ImageDataResultInfo ImageDataResult="FilterFormModel.ImageResult" />
                    </Info>
                </ImageDataResultSelect>
            </Inputs>
        </Filters>

        @if (PerformancesPagedServiceResult is not null)
        {

            <PagedList OnPageChanged="@(async (request) => { await FetchPerformances(request, PerformancesPagedServiceResult.Filter.ToRequest());  })"
                       PagedServiceResult="PerformancesPagedServiceResult" Context="PerformanceResult">
                <ItemTemplate>
                    <div>
                        @if (PerformanceResult.ImageResult is not null)
                        {
                            <img src="@($"https://localhost:7061/image/download/{PerformanceResult.ImageResult?.Id}")" />

                        }
                        else
                        {
                            <p>no image</p>
                        }

                        <div>
                            @if (!string.IsNullOrWhiteSpace(PerformanceResult.ArtistResult.Alias))
                            {
                                <h4>@PerformanceResult.ArtistResult.Alias (@PerformanceResult.ArtistResult.PersonResult?.Firstname @PerformanceResult.ArtistResult.PersonResult?.Lastname)</h4>

                            }
                            else
                            {
                                <h4>@PerformanceResult.ArtistResult.PersonResult?.Firstname @PerformanceResult.ArtistResult.PersonResult?.Lastname</h4>
                            }

                            <ul>
                                <li>Lineup: @PerformanceResult.ActResult.LineupResult.Doors.ToLongDateString() @PerformanceResult.ActResult.LineupResult.Title</li>
                                <li>Act: @PerformanceResult.ActResult.Start?.ToLongDateString() @PerformanceResult.ActResult.Name</li>
                            </ul>

                            <NavLink href="@($"performance/edit/{PerformanceResult.Id}")" class="button">Edit</NavLink>
                        </div>
                    </div>
                </ItemTemplate>
            </PagedList>
        }

        @if (showImageDataResultOptions)
        {
            <ImageDataResultOptions OnDataResultSelected="(dataResult) => filterEditContext.SelectDataResult(dataResult, () => dataResult.Id, value => ((PerformanceFilterFormModel)editContext.Model).ImageId = value, value => ((PerformanceFilterFormModel)editContext.Model).ImageResult = value)"
                                    OnSelectDisplayStateChanged="(state) => showImageDataResultOptions = state"
                                    Context="Context">
                <FilterInputs>
                    <div>
                        <label for="alt">Alt</label>

                        <InputText @bind-Value="Context.Alt" id="alt" />
                    </div>
                </FilterInputs>

                <Template>
                    <ImageDataResultInfo ImageDataResult="Context" />
                </Template>
            </ImageDataResultOptions>
        }
    </section>
}


@code {
    private PagedServiceResult<IList<PerformanceResult>, PerformanceFilterResult>? PerformancesPagedServiceResult;

    private EditContext? filterEditContext;

    private bool showImageDataResultOptions = false;

    protected override void OnInitialized()
    {
        PerformancesPagedServiceResult = (PagedServiceResult<IList<PerformanceResult>, PerformanceFilterResult>?)DataControllerService.Data;

        if (PerformancesPagedServiceResult is null) return;

        filterEditContext = new(PerformancesPagedServiceResult.Filter.ToFormModel());

        base.OnInitialized();
    }

    private async Task FetchPerformances(PaginationRequest paginationRequest, PerformanceFilterRequest performanceFilterRequest)
    {
        PerformancesPagedServiceResult = await DataControllerService.Fetch<PagedServiceResult<IList<PerformanceResult>, PerformanceFilterResult>>(async () => await PerformanceApiService.GetAll(paginationRequest, performanceFilterRequest));

        MemoryService.Set(PerformancesPagedServiceResult.Filter);
        MemoryService.Set(PerformancesPagedServiceResult.Pagination);

        filterEditContext = new(PerformancesPagedServiceResult.Filter.ToFormModel());
    }

    public void Dispose()
    {
        DataControllerService.Data = null;
    }
}