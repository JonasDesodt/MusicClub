@inherits LayoutComponentBase

@inject NavigationManager NavigationManager
@inject DataController DataControllerService
@inject MemoryService MemoryService
@inject JsFunctions JsFunctions

@if (isLoading)
{
    <Spinner />
}

@if (isOpen)
{
    <div class="modal">
        <div>
            <p>You have unsaved data.</p>

            <div class="buttons">
                <button @onclick="() => isOpen = false">Stay</button>
                <button @onclick="HandleContinue" class="danger">Leave</button>
            </div>
        </div>
    </div>
}

@if (hasFetchError)
{
    <div class="modal">
        <div>
            <p>Unable to load the requested page.</p>
            <p>Please try again later.</p>

            <button @onclick="() => hasFetchError = false">Ok</button>
        </div>
    </div>
}

@if (isInitCompleted is true)
{
    <div class="@(_isMenuOverlayOpen ? "menu-overlay-open" : "menu-overlay-closed")" id="app-content">
        <header>
            <div>
                <h1><NavLink href="">Music Club</NavLink></h1>

                <button @onclick="ToggleOverlay">@(_isMenuOverlayOpen ? "Close" : "Open")</button>
            </div>

            <nav>
                <ul>
                    <li><NavLink href="act">Act</NavLink></li>
                    <li><NavLink href="artist">Artists</NavLink></li>
                    <li><NavLink href="image">Images</NavLink></li>
                    <li><NavLink href="lineup">Lineups</NavLink></li>
                    <li><NavLink href="performance">Performances</NavLink></li>
                    <li><NavLink href="person">People</NavLink></li>
                </ul>

                <ul>
                    <li><NavLink href="google-calendar/login">Google calendar</NavLink></li>
                </ul>
            </nav>
        </header>

        <main>
            <CascadingValue Value="isOpen">
                @Body
            </CascadingValue>
        </main>

        <footer>
            <p>&copy 2024 @(DateTime.Now.Year > 2024 ? "- " + DateTime.Now.Year : string.Empty) Music Club</p>
        </footer>
    </div>
}
else if (isInitCompleted is false)
{
    <div class="modal">
        <div>
            <p>Unable to load the requested page.</p>
            <p>Please refresh the page or close the window and try again later.</p>

            <button @onclick="() => NavigationManager.Refresh()">Refresh</button>
        </div>
    </div>
}

<div class="navigation buttons">
    @if (previousUrl is { } previous)
    {
        <NavLink href="@previous" class="button" @onclick="HandleOnPreviousNavigationHistoryLinkClicked">Previous</NavLink>
    }
    else
    {
        <NavLink class="button disabled">Previous</NavLink>
    }

    @if (nextUrl is { } next)
    {
        <NavLink href="@next" class="button" @onclick="HandleOnNextNavigationHistoryLinkClicked">Next</NavLink>
    }
    else
    {
        <NavLink class="button disabled">Next</NavLink>
    }

    <button id="scroll-to-top" @onclick="() => JsFunctions.ScrollToTop()">&#11205;</button>
</div>


@code {
    private bool isLoading;

    private bool hasFetchError;

    private bool? isInitCompleted = null;

    private List<string> navigationHistory = [];
    private int navigationHistoryIndex = -1;
    private string? previousUrl = null;
    private bool isPreviousNavigationLinkButtonClicked = false;
    private string? nextUrl = null;
    private bool isNextNavigationLinkButtonClicked = false;

    private string? returnUrl = null;

    protected override async Task OnInitializedAsync()
    {
        await JsFunctions.AddHandleOnScroll();

        NavigationManager.RegisterLocationChangingHandler(async args =>
        {
            await DataControllerService.CancelCurrentFetch();

            if (MemoryService.HasUnsavedData)
            {
                MemoryService.NavigationRequest = args.TargetLocation;

                args.PreventNavigation();

                MemoryService.RequestConfirmation();

                isPreviousNavigationLinkButtonClicked = isNextNavigationLinkButtonClicked = false;

                return;
            }

            if (!await DataControllerService.HandleLocationChanged(args.TargetLocation))
            {
                await DataControllerService.CancelCurrentFetch();

                args.PreventNavigation();

                hasFetchError = true;
                StateHasChanged();

                isPreviousNavigationLinkButtonClicked = isNextNavigationLinkButtonClicked = false;

                return; //this return needs more testing
            }

            UpdateNavigationHistory(args.TargetLocation);

            _isMenuOverlayOpen = false;
        });

        DataControllerService.OnFetchStateChanged += FetchStateChanged;

        MemoryService.OnConfirmationRequested += (sender, args) => { isOpen = true; StateHasChanged(); };

        if (await DataControllerService.HandleLocationChanged(NavigationManager.Uri))
        {
            navigationHistory.Add(NavigationManager.Uri);
            navigationHistoryIndex++;

            isInitCompleted = true;
        };

        base.OnInitialized();
    }

    private void FetchStateChanged(object? sender, bool state)
    {
        isLoading = state;
        StateHasChanged();
    }

    private bool isOpen;

    private void HandleContinue()
    {
        if (!string.IsNullOrWhiteSpace(MemoryService.NavigationRequest))
        {
            isOpen = MemoryService.HasUnsavedData = false;
            NavigationManager.NavigateTo(MemoryService.NavigationRequest);
        }
    }


    private bool _isMenuOverlayOpen = false;

    private void ToggleOverlay() => _isMenuOverlayOpen = !_isMenuOverlayOpen;

    private void UpdateNavigationHistory(string targetUri)
    {
        if ((isPreviousNavigationLinkButtonClicked || isNextNavigationLinkButtonClicked))
        {
            if (isPreviousNavigationLinkButtonClicked)
            {
                navigationHistoryIndex--;

                if (navigationHistoryIndex == 0)
                {
                    previousUrl = null;
                }
                else
                {
                    previousUrl = navigationHistory[navigationHistoryIndex - 1];
                }

                nextUrl = navigationHistory[navigationHistoryIndex + 1];
            }
            else
            {
                navigationHistoryIndex++;

                if (navigationHistoryIndex == navigationHistory.Count - 1)
                {
                    nextUrl = null;
                }
                else
                {
                    nextUrl = navigationHistory[navigationHistoryIndex + 1];
                }

                previousUrl = navigationHistory[navigationHistoryIndex - 1];
            }
        }
        else
        {
            navigationHistory = navigationHistory[..(navigationHistoryIndex + 1)];

            previousUrl = navigationHistory.Last();
            nextUrl = null;

            navigationHistory.Add(targetUri);
            navigationHistoryIndex = navigationHistory.Count - 1;
        }

        isPreviousNavigationLinkButtonClicked = isNextNavigationLinkButtonClicked = false;
    }

    private void HandleOnPreviousNavigationHistoryLinkClicked()
    {
        isPreviousNavigationLinkButtonClicked = true;
    }

    private void HandleOnNextNavigationHistoryLinkClicked()
    {
        isNextNavigationLinkButtonClicked = true;
    }
}
