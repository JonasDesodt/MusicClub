@inherits LayoutComponentBase

@inject NavigationManager NavigationManager
@inject DataController DataControllerService
@inject MemoryService MemoryService
@inject JsFunctions JsFunctions

@if (isLoading)
{
    <Spinner />
}

@if (isOpen)
{
    <div id="modal">
        <div>
            <p>You have unsaved data.</p>

            <div>
                <button @onclick="() => isOpen = false">Stay</button>
                <button @onclick="HandleContinue" class="danger">Leave</button>
            </div>
        </div>
    </div>
}

@if (hasFetchError)
{
    <div class="modal">
        <div>
            <p>Unable to load the requested page.</p>
            <p>Please try again later.</p>

            <button @onclick="() => hasFetchError = false">Ok</button>
        </div>
    </div>
}

@if (isInitCompleted is true)
{
    <NavLink href="/artist/create">Create</NavLink>

    <NavLink href="/"> Home</NavLink>

    <main>
        <CascadingValue Value="isOpen">
            @Body
        </CascadingValue>
    </main>

}
else if (isInitCompleted is false)
{
    <div class="modal">
        <div>
            <p>Unable to load the requested page.</p>
            <p>Please refresh the page or close the window and try again later.</p>

            <button @onclick="() => NavigationManager.Refresh()">Refresh</button>
        </div>
    </div>
}

<button id="scroll-to-top" @onclick="() => JsFunctions.ScrollToTop()">&#11205;</button>

@code {
    private bool isLoading;

    private bool hasFetchError;

    private bool? isInitCompleted = null;

    protected override async Task OnInitializedAsync()
    {
        await JsFunctions.AddHandleOnScroll();

        NavigationManager.RegisterLocationChangingHandler(async args =>
        {
            await DataControllerService.CancelCurrentFetch();

            if (MemoryService.HasUnsavedData)
            {
                MemoryService.NavigationRequest = args.TargetLocation;

                args.PreventNavigation();

                MemoryService.RequestConfirmation();

                return;
            }

            if (!await DataControllerService.HandleLocationChanged(args.TargetLocation))
            {
                await DataControllerService.CancelCurrentFetch();

                args.PreventNavigation();

                hasFetchError = true;
                StateHasChanged();
            }
        });

        DataControllerService.OnFetchStateChanged += FetchStateChanged;

        MemoryService.OnConfirmationRequested += (sender, args) => { isOpen = true; StateHasChanged(); };

        isInitCompleted = await DataControllerService.HandleLocationChanged(NavigationManager.Uri);

        base.OnInitialized();
    }

    private void FetchStateChanged(object? sender, bool state)
    {
        isLoading = state;
        StateHasChanged();
    }

    private bool isOpen;

    private void HandleContinue()
    {
        if (!string.IsNullOrWhiteSpace(MemoryService.NavigationRequest))
        {
            isOpen = MemoryService.HasUnsavedData = false;
            NavigationManager.NavigateTo(MemoryService.NavigationRequest);
        }
    }
}
