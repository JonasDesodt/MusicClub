@if (PeoplePagedServiceResult is not null)
{
    <section>
        <h3>Select person</h3>

        <div>
            <button @onclick="()=> PeoplePagedServiceResult = null" class="warning">Close</button>

            <PagedList OnPageChanged="(model) => OnPeoplePageChanged.InvokeAsync(new PageChangedArgs<PersonFilter> { PaginationRequest = new PaginationRequest { Page = model.Page, PageSize = model.PageSize }, Filter = new PersonFilter {}})"
                       PagedServiceResult="PeoplePagedServiceResult" Context="PersonResult">

                <ItemTemplate>
                    <SelectPersonItem Model="PersonResult"
                                      OnSelected="(selectedPerson) => SelectPerson(selectedPerson)" />
                </ItemTemplate>
            </PagedList>
        </div>
    </section>
}

@if (ImagesPagedServiceResult is not null)
{
    <section>
        <h3>Select image</h3>

        <div>
            <button @onclick="() => ImagesPagedServiceResult = null" class="warning">Close</button>

            <PagedList OnPageChanged="(model) => OnImagesPageChanged.InvokeAsync(new PageChangedArgs<ImageFilter> { PaginationRequest = new PaginationRequest { Page = model.Page, PageSize = model.PageSize }, Filter = new ImageFilter {}})"
                       PagedServiceResult="ImagesPagedServiceResult" Context="ImageResult">

                <ItemTemplate>
                    <SelectImageItem Model="ImageResult"
                                     OnSelected="(selectedImage) => SelectImage(selectedImage)" />
                </ItemTemplate>
            </PagedList>
        </div>
    </section>
}

@code {
    [Parameter, EditorRequired]
    public required EditContext EditContext { get; set; }

    [Parameter, EditorRequired]
    public required PagedServiceResult<IList<PersonResult>, PersonFilter>? PeoplePagedServiceResult { get; set; }

    [Parameter, EditorRequired]
    public required PagedServiceResult<IList<ImageResult>, ImageFilter>? ImagesPagedServiceResult { get; set; }

    [Parameter, EditorRequired]
    public required EventCallback<PageChangedArgs<PersonFilter>> OnPeoplePageChanged { get; set; }

    [Parameter, EditorRequired]
    public required EventCallback<PageChangedArgs<ImageFilter>> OnImagesPageChanged { get; set; }

    private void SelectPerson(PersonResult personResult)
    {
        if (EditContext is null || EditContext.Model is not ArtistFormModel formModel) return;

        formModel.PersonId = personResult.Id;
        formModel.PersonResult = personResult;

        EditContext.NotifyFieldChanged(FieldIdentifier.Create(() => formModel.PersonId));

        PeoplePagedServiceResult = null;
    }

    private void SelectImage(ImageResult imageResult)
    {
        if (EditContext is null || EditContext.Model is not ArtistFormModel formModel) return;

        formModel.ImageId = imageResult.Id;
        formModel.ImageResult = imageResult;

        EditContext.NotifyFieldChanged(FieldIdentifier.Create(() => formModel.ImageId));

        ImagesPagedServiceResult = null;
    }
}
