@inherits CreateEditForm<ActFormModel>

<CreateEditContainer IsSelectOpen="showLineupDataResultOptions || showImageDataResultOptions">
    <Content>
        <EditForm EditContext="editContext"
                  OnValidSubmit="() => OnValidSubmit.InvokeAsync(FormModel)"
                  @onreset="() => HandleOnReset([value => FormModel.LineupId = value, value => FormModel.ImageId = value], [value => FormModel.LineupResult = (LineupResult?)value, value => FormModel.ImageResult = (ImageResult?)value])">
            <DataAnnotationsValidator></DataAnnotationsValidator>

            <ValidationSummary></ValidationSummary>

            <div>
                <div>
                    <label for="name">Name</label>

                    <InputText @bind-Value="FormModel.Name" id="name" />
                </div>

                <div>
                    <label for="title">Title</label>

                    <InputText @bind-Value="FormModel.Title" id="title" />
                </div>

                <div>
                    <label for="doors">Start</label>

                    <InputDate Type="InputDateType.DateTimeLocal" @bind-Value="FormModel.Start" id="start" />
                </div>

                <div>
                    <label for="duration">Duration</label>

                    <InputNumber @bind-Value="FormModel.Duration" id="duration" />
                </div>

                @if (FormModel.Start is not null && FormModel.Duration > 0)
                {
                    <div>
                        <label for="push">Sync</label>

                        <div class="checkbox">
                            <p>Push to Google Calendar</p>

                            <InputCheckbox @bind-Value="FormModel.Push" id="push" />
                        </div>
                    </div>
                }
                else
                {
                    FormModel.Push = false;

                    <div class="disabled">
                        <label for="push">Sync</label>

                        <div class="checkbox">
                            <p>Push to Google Calendar</p>

                            <InputCheckbox @bind-Value="FormModel.Push" id="push" disabled />
                        </div>
                    </div>
                }

                <LineupDataResultSelect DataResult="FormModel.LineupResult"
                                        Context="ActResult"
                                        OnDataRequest="() => showLineupDataResultOptions = true"
                                        OnRemoveRequest="() => {FormModel.LineupId = null; FormModel.LineupResult = null; NotifyFormChanged();}"
                                        @bind-Value="FormModel.LineupId">
                    <Info>
                        <LineupDataResultInfo DataResult="FormModel.LineupResult" />
                    </Info>
                </LineupDataResultSelect>

                <ImageDataResultSelect DataResult="FormModel.ImageResult"
                                       Context="ImageResult"
                                       OnDataRequest="() => showImageDataResultOptions = true"
                                       OnRemoveRequest="() => { FormModel.ImageId = null; FormModel.ImageResult = null; NotifyFormChanged(); }"
                                       @bind-Value="FormModel.ImageId">
                    <Info>
                        <ImageDataResultInfo DataResult="FormModel.ImageResult" />
                    </Info>
                </ImageDataResultSelect>
            </div>

            <div class="buttons flex-end">
                @Buttons
            </div>
        </EditForm>

        @if (showLineupDataResultOptions)
        {
            <LineupDataResultOptions Context="Context">
                <Header>
                    <OptionsHeader Model="Lineup" OnCloseRequested="() => showLineupDataResultOptions = false" />
                </Header>

                <FilterInputs>
                    <LineupFilterFormModelInputs FilterFormModel="Context" />
                </FilterInputs>

                <Template>
                    <OptionsTemplate DataResult="Context.DataResult"
                                     ShowImage="Context.ShowImages"
                                     EditContext="editContext"
                                     TDataResult="LineupResult"
                                     TDataResultInfo="LineupDataResultInfo"
                                     GetDataResultId="() => Context.DataResult.Id"
                                     SetDataResultId="value => FormModel.LineupId = value"
                                     SetDataResult="value => FormModel.LineupResult = value"
                                     OnDataResultSelected="() => showLineupDataResultOptions = false" />
                </Template>
            </LineupDataResultOptions>
        }

        @if (showImageDataResultOptions && editContext is not null)
        {
            <ImageDataResultOptions Context="Context">
                <Header>
                    <OptionsHeader Model="Image" OnCloseRequested="() => showImageDataResultOptions = false" />
                </Header>

                <FilterInputs>
                    <ImageFilterFormModelInputs FilterFormModel="Context" />
                </FilterInputs>

                <Template>
                    <OptionsTemplate DataResult="Context.DataResult"
                                     ShowImage="Context.ShowImages"
                                     EditContext="editContext"
                                     TDataResult="ImageResult"
                                     TDataResultInfo="ImageDataResultInfo"
                                     GetDataResultId="() => Context.DataResult.Id"
                                     SetDataResultId="value => FormModel.ImageId = value"
                                     SetDataResult="value => FormModel.ImageResult = value"
                                     OnDataResultSelected="() => showImageDataResultOptions = false" />
                </Template>
            </ImageDataResultOptions>
        }
    </Content>
</CreateEditContainer>

@code {
    private bool showLineupDataResultOptions = false;
    private bool showImageDataResultOptions = false;
}