@inherits CreateEditForm<PerformanceFormModel>

@inject IActService ActApiService
@inject IArtistService ArtistApiService
@inject IImageApiService ImageApiService

<div class="@(!showActDataResultOptions && !showArtistDataResultOptions && !showImageDataResultOptions ? "select-closed" : "select-open")">
    <EditForm EditContext="editContext" OnValidSubmit="() => OnValidSubmit.InvokeAsync(FormModel)">
        <DataAnnotationsValidator></DataAnnotationsValidator>

        <ValidationSummary></ValidationSummary>

        <div>
            <div>
                <label for="instrument">Instrument</label>

                <InputText @bind-Value="FormModel.Instrument" id="instrument" />
            </div>

            <ArtistDataResultSelect DataResult="FormModel.ArtistResult"
                                    Context="ArtistResult"
                                    OnDataRequest="() => showArtistDataResultOptions = true"
                                    OnRemoveRequest="() => {FormModel.ArtistId = null; FormModel.ArtistResult = null; NotifyFormChanged(); }"
                                    @bind-Value="FormModel.ArtistId">
                <Info>
                    <ArtistDataResultInfo ArtistDataResult="FormModel.ArtistResult" />
                </Info>
            </ArtistDataResultSelect>

            <ActDataResultSelect DataResult="FormModel.ActResult"
                                 Context="ActResult"
                                 OnDataRequest="() => showActDataResultOptions = true"
                                 OnRemoveRequest="() => {FormModel.ActId = null; FormModel.ActResult = null; NotifyFormChanged();}"
                                 @bind-Value="FormModel.ActId">
                <Info>
                    <ActDataResultInfo ActDataResult="FormModel.ActResult" />
                </Info>
            </ActDataResultSelect>

            <ImageDataResultSelect DataResult="FormModel.ImageResult"
                                   Context="ImageResult"
                                   OnDataRequest="() => showImageDataResultOptions = true"
                                   OnRemoveRequest="() => { FormModel.ImageId = null; FormModel.ImageResult = null; NotifyFormChanged(); }"
                                   @bind-Value="FormModel.ImageId">
                <Info>
                    <ImageDataResultInfo ImageDataResult="FormModel.ImageResult" />
                </Info>
            </ImageDataResultSelect>
        </div>

        <div>
            @Buttons
        </div>
    </EditForm>

    @if (showActDataResultOptions)
    {
        <ActDataResultOptions OnDataResultSelected="(dataResult) => editContext.SelectDataResult(dataResult, () => dataResult.Id, value => FormModel.ActId = value, value => FormModel.ActResult = value)"
                              OnSelectDisplayStateChanged="(state) => showActDataResultOptions = state"
                              Context="Context">
            <FilterInputs>
                <div>
                    <label for="name">Name</label>

                    <InputText @bind-Value="Context.Name" id="name" />
                </div>

                <div>
                    <label for="duration">Duration</label>

                    <InputNumber @bind-Value="Context.Duration" id="duration" />
                </div>

                <div>
                    <label for="start">Start</label>

                    <InputDate Type="InputDateType.DateTimeLocal" @bind-Value="Context.Start" id="start" />
                </div>
            </FilterInputs>

            <Template>
                <ActDataResultInfo ActDataResult="Context" />
            </Template>
        </ActDataResultOptions>
    }

    @if (showArtistDataResultOptions)
    {
        <ArtistDataResultOptions OnDataResultSelected="(dataResult) => editContext.SelectDataResult(dataResult, () => dataResult.Id, value => FormModel.ArtistId = value, value => FormModel.ArtistResult = value)"
                                 OnSelectDisplayStateChanged="(state) => showArtistDataResultOptions = state"
                                 Context="Context">
            <FilterInputs>
                <div>
                    <label for="alias">Alias</label>

                    <InputText @bind-Value="Context.Alias" id="alias" />
                </div>

                <div>
                    <label for="firstName">Firstname</label>

                    <InputText @bind-Value="Context.Firstname" id="firstName" />
                </div>

                <div>
                    <label for="lastName">Lastname</label>

                    <InputText @bind-Value="Context.Lastname" id="lastName" />
                </div>
            </FilterInputs>

            <Template>
                <ArtistDataResultInfo ArtistDataResult="Context" />
            </Template>
        </ArtistDataResultOptions>
    }

    @if (showImageDataResultOptions)
    {
        <ImageDataResultOptions OnDataResultSelected="(dataResult) => editContext.SelectDataResult(dataResult, () => dataResult.Id, value => FormModel.ImageId = value, value => FormModel.ImageResult = value)"
                                OnSelectDisplayStateChanged="(state) => showImageDataResultOptions = state"
                                Context="Context">
            <FilterInputs>
                <div>
                    <label for="alt">Alt</label>

                    <InputText @bind-Value="Context.Alt" id="alt" />
                </div>
            </FilterInputs>

            <Template>
                <ImageDataResultInfo ImageDataResult="Context" />
            </Template>
        </ImageDataResultOptions>
    }
</div>



@code{
    private bool showImageDataResultOptions = false;
    private bool showArtistDataResultOptions = false;
    private bool showActDataResultOptions = false;
}