@inherits CreateEditForm<PerformanceFormModel>

<CreateEditContainer IsSelectOpen="showActDataResultOptions || showArtistDataResultOptions || showImageDataResultOptions">
    <Content>
        <EditForm EditContext="editContext" OnValidSubmit="() => OnValidSubmit.InvokeAsync(FormModel)" @onreset="() => HandleOnReset([value => FormModel.ActId = value, value => FormModel.ArtistId = value, value => FormModel.ImageId = value], [value => FormModel.ActResult = (ActResult?)value, value => FormModel.ArtistResult = (ArtistResult?)value, value => FormModel.ImageResult = (ImageResult?)value])">
            <DataAnnotationsValidator></DataAnnotationsValidator>

            <ValidationSummary></ValidationSummary>

            <div>
                <div>
                    <label for="instrument">Instrument</label>

                    <InputText @bind-Value="FormModel.Instrument" id="instrument" />
                </div>

                <ArtistDataResultSelect DataResult="FormModel.ArtistResult"
                                        Context="ArtistResult"
                                        OnDataRequest="() => showArtistDataResultOptions = true"
                                        OnRemoveRequest="() => {FormModel.ArtistId = null; FormModel.ArtistResult = null; NotifyFormChanged(); }"
                                        @bind-Value="FormModel.ArtistId">
                    <Info>
                        <ArtistDataResultInfo DataResult="FormModel.ArtistResult" />
                    </Info>
                </ArtistDataResultSelect>

                <ActDataResultSelect DataResult="FormModel.ActResult"
                                     Context="ActResult"
                                     OnDataRequest="() => showActDataResultOptions = true"
                                     OnRemoveRequest="() => { FormModel.ActId = null; FormModel.ActResult = null; NotifyFormChanged();}"
                                     @bind-Value="FormModel.ActId">
                    <Info>
                        <ActDataResultInfo DataResult="FormModel.ActResult" />
                    </Info>
                </ActDataResultSelect>

                <ImageDataResultSelect DataResult="FormModel.ImageResult"
                                       Context="ImageResult"
                                       OnDataRequest="() => showImageDataResultOptions = true"
                                       OnRemoveRequest="() => { FormModel.ImageId = null; FormModel.ImageResult = null; NotifyFormChanged(); }"
                                       @bind-Value="FormModel.ImageId">
                    <Info>
                        <ImageDataResultInfo DataResult="FormModel.ImageResult" />
                    </Info>
                </ImageDataResultSelect>
            </div>

            <div class="buttons flex-end">
                @Buttons
            </div>
        </EditForm>

        @if (showActDataResultOptions)
        {
            <ActDataResultOptions Context="Context">
                <Header>
                    <OptionsHeader Model="Act" OnCloseRequested="() => showActDataResultOptions = false" />
                </Header>

                <FilterInputs>
                    <ActFilterFormModelInputs FilterFormModel="Context" />
                </FilterInputs>

                <Template>
                    <OptionsTemplate TDataResult="ActResult"
                                     TDataResultInfo="ActDataResultInfo"
                                     DataResult="Context.DataResult"
                                     ShowImage="Context.ShowImages"
                                     EditContext="editContext"
                                     GetDataResultId="() => Context.DataResult.Id"
                                     SetDataResultId="value => FormModel.ActId = value"
                                     SetDataResult="value => FormModel.ActResult = value"
                                     OnDataResultSelected="() => showActDataResultOptions = false" />
                </Template>
            </ActDataResultOptions>
        }

        @if (showArtistDataResultOptions)
        {
            <ArtistDataResultOptions Context="Context">
                <Header>
                    <OptionsHeader Model="Artist" OnCloseRequested="() => showArtistDataResultOptions = false" />
                </Header>

                <FilterInputs>
                    <ArtistFilterFormModelInputs FilterFormModel="Context" />
                </FilterInputs>

                <Template>
                    <OptionsTemplate TDataResult="ArtistResult"
                                     TDataResultInfo="ArtistDataResultInfo"
                                     DataResult="Context.DataResult"
                                     ShowImage="Context.ShowImages"
                                     EditContext="editContext"
                                     GetDataResultId="() => Context.DataResult.Id"
                                     SetDataResultId="value => FormModel.ArtistId = value"
                                     SetDataResult="value => FormModel.ArtistResult = value"
                                     OnDataResultSelected="() => showArtistDataResultOptions = false" />
                </Template>
            </ArtistDataResultOptions>
        }

        @if (showImageDataResultOptions)
        {
            <ImageDataResultOptions Context="Context">
                <Header>
                    <OptionsHeader Model="Image" OnCloseRequested="() => showImageDataResultOptions = false" />
                </Header>

                <FilterInputs>
                    <ImageFilterFormModelInputs FilterFormModel="Context" />
                </FilterInputs>

                <Template>
                    <OptionsTemplate DataResult="Context.DataResult"
                                     ShowImage="Context.ShowImages"
                                     EditContext="editContext"
                                     TDataResult="ImageResult"
                                     TDataResultInfo="ImageDataResultInfo"
                                     GetDataResultId="() => Context.DataResult.Id"
                                     SetDataResultId="value => FormModel.ImageId = value"
                                     SetDataResult="value => FormModel.ImageResult = value"
                                     OnDataResultSelected="() => showImageDataResultOptions = false" />
                </Template>
            </ImageDataResultOptions>
        }
    </Content>
</CreateEditContainer>

@code {
    private bool showImageDataResultOptions = false;
    private bool showArtistDataResultOptions = false;
    private bool showActDataResultOptions = false;
}