@implements IDisposable

@inject MemoryService MemoryService

<div>
    <EditForm EditContext="imageEditContext" OnValidSubmit="() => OnValidSubmit.InvokeAsync(ImageFormModel)">
        <DataAnnotationsValidator></DataAnnotationsValidator>

        <ValidationSummary></ValidationSummary>

        <div>
            <div>
                <label for="alt">Alt</label>

                <InputText @bind-Value="ImageFormModel.Alt" id="alt" />
            </div>

            <div>
                <label for="file">File</label>

                <InputFile @key="InputFileId" OnChange="HandleFileSelection" id="file" />

                @if (!string.IsNullOrWhiteSpace(imagePreview))
                {
                    <img src="@imagePreview" alt="Image Preview" />
                }
                else
                {
                    <p class="dummy-image">no image</p>
                }

                <button type="button" @onclick="OnClearInputFile">Clear</button>
            </div>

            @if (Info is not null)
            {
                @Info
            }
        </div>

        <div>
            @Buttons
        </div>
    </EditForm>
</div>

@code {
    [Parameter, EditorRequired]
    public required EventCallback<IImageFormModel> OnValidSubmit { get; set; }

    [Parameter, EditorRequired]
    public required IImageFormModel ImageFormModel { get; set; }

    [Parameter, EditorRequired]
    public required RenderFragment Buttons { get; set; }

    [Parameter]
    public RenderFragment? Info { get; set; }

    private EditContext? imageEditContext { get; set; }

    private PagedServiceResult<IList<ImageResult>, ImageFilterResult>? imagesPagedServiceResult { get; set; }

    protected override void OnInitialized()
    {
        imageEditContext = new(ImageFormModel);

        imageEditContext.OnFieldChanged += HandleFieldChanged;

        base.OnInitialized();
    }

    [Parameter, EditorRequired]
    public Guid InputFileId { get; set; }

    //!!!!
    // https://learn.microsoft.com/en-us/aspnet/core/mvc/models/file-uploads?view=aspnetcore-8.0#security-considerations
    //!!!!

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        var oldInputFieldId = InputFileId;

        parameters.SetParameterProperties(this);

        if (parameters.TryGetValue(nameof(InputFileId), out Guid newInputFileId))
        {
            if (oldInputFieldId != Guid.Empty && newInputFileId != oldInputFieldId)
            {
                ImageFormModel.BrowserFile = null;
                imagePreview = null;
            }
        }

        await base.SetParametersAsync(ParameterView.Empty);
    }


    private void HandleFieldChanged(object? sender, FieldChangedEventArgs e)
    {
        MemoryService.HasUnsavedData = true;
    }

    public void Dispose()
    {
        if (imageEditContext is not null)
        {
            imageEditContext.OnFieldChanged -= HandleFieldChanged;
        }
    }

    private string? imagePreview;
    private async Task HandleFileSelection(InputFileChangeEventArgs e)
    {
        // //todo: is this necessary?
        // ImageFormModel.BrowserFile = null;

        //todo: is this necessary?
        // MemoryService.HasUnsavedData = true;

        // var file = e.File;
        if (e.File is { Size: < 512000 } file)
        {
            //in attribute?
            if (!file.ContentType.StartsWith("image/")) // use regex? validationattribute?
            {
                return;
            }

            ImageFormModel.BrowserFile = file;

            var buffer = new byte[file.Size];
            await file.OpenReadStream().ReadAsync(buffer);

            // Convert the byte array to a base64 string
            var base64String = Convert.ToBase64String(buffer);

            imagePreview = $"data:image/png;base64,{Convert.ToBase64String(buffer)}";
            // StateHasChanged();

            imageEditContext?.NotifyFieldChanged(FieldIdentifier.Create(() => ImageFormModel.BrowserFile));
        }
        else
        {
            ImageFormModel.BrowserFile = e.File;
            imagePreview = null;

            imageEditContext?.NotifyFieldChanged(FieldIdentifier.Create(() => ImageFormModel.BrowserFile));

            ImageFormModel.BrowserFile = null;
        }


    }

    private void OnClearInputFile()
    {
        InputFileId = Guid.NewGuid();
        ImageFormModel.BrowserFile = null;
        imagePreview = null;
    }
}