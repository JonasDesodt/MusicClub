@using MusicClub.Cms.Blazor.Helpers
@using MusicClub.Dto.Enums

@typeparam TDataRequest
@typeparam TDataResult where TDataResult : class
@typeparam TFilterRequest where TFilterRequest : class, new()
@typeparam TFilterResult where TFilterResult : class, IConvertToRequest<TFilterRequest>
@typeparam TDataResultHelpers where TDataResultHelpers : IDataResultHelpers<TDataResult>

@typeparam TApiService where TApiService : IService<TDataRequest, TDataResult, TFilterRequest, TFilterResult>

@inject TApiService ApiService
@inject MemoryService MemoryService
@inject NavigationManager NavigationManager
@inject TDataResultHelpers DataResultHelpers
@inject DataController DataController

@if (!HasCritialDependencies)
{
    <h4>Are you want to delete the following @Model.ToLower()?</h4>
}
else
{
    <h4>The @Model.ToLower() cannot be deleted. There are critical dependencies.</h4>
}

@if (dataResult is not null)
{
    @Info(dataResult)
}

<div>

    @if (!HasCritialDependencies)
    {
        <NavLink href="@($"{Model.ToLower()}/edit/{Id}")" class="button">No</NavLink>

        <button class="danger" @onclick="() => DeleteDataResult(Id)">Yes</button>
    }
    else
    {
        <NavLink href="@($"{Model.ToLower()}/edit/{Id}")" class="button">Return</NavLink>
    }

</div>

@code {
    [Parameter]
    public int Id { get; set; }

    [Parameter, EditorRequired]
    public required RenderFragment<TDataResult> Info { get; set; }

    [Parameter, EditorRequired]
    public required string Model { get; set; }

    public required bool HasCritialDependencies { get; set; }

    public TDataResult? dataResult { get; set; }

    protected override void OnInitialized()
    {
        var serviceResult = (ServiceResult<TDataResult>?)DataController.Data;
        DataController.Data = null;

        dataResult = serviceResult?.Data;
        if (dataResult is not null)
        {
            HasCritialDependencies = DataResultHelpers.HasCriticalDependencies(dataResult);
        }

        base.OnInitialized();
    }

    private async Task DeleteDataResult(int id)
    {
        var serviceResult = await DataController.Fetch<ServiceResult<TDataResult>?>(async () => await ApiService.Delete(Id));
        if (serviceResult?.Messages is null)
        {
            MemoryService.HasUnsavedData = false;

            MemoryService.Clear<PaginationResult>();

            NavigationManager.NavigateTo("/act");
        }
    }
}
