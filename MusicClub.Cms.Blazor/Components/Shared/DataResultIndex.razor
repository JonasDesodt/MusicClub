@using MusicClub.Cms.Blazor.Helpers

@typeparam TDataRequest
@typeparam TDataResult where TDataResult : class
@typeparam TFilterRequest where TFilterRequest : class, new()
@typeparam TFilterResult where TFilterResult : class, IConvertToRequest<TFilterRequest>
@typeparam TApiService where TApiService : IService<TDataRequest, TDataResult, TFilterRequest, TFilterResult>
@typeparam TFilterFormModel where TFilterFormModel : class, new()

@* @inject TApiService ApiService
@inject DataController DataController *@
@inject MemoryService MemoryService

@* @inject IFilterResultHelpers<TFilterResult, TFilterFormModel> FilterResultHelper *@
@inject IFilterFormModelHelpers<TFilterRequest, TFilterFormModel> FilterFormModelHelpers


<section>
    @Header

    <div>
        @if (FilterEditContext is not null)
        {
            <Filters EditContext="FilterEditContext"
                     OnValidSubmit="HandleOnValidSubmit"
                     OnReset="HandleOnReset"
                     TFilterRequest="TFilterRequest"
                     TFilterFormModel="TFilterFormModel"
                     Context="FilterFormModel">
                <Inputs>
                    @FilterInputs(FilterFormModel)
                </Inputs>
            </Filters>
        }

        <PagedList OnPageChanged="(model) => HandleOnPageChanged(model)"
                   PagedServiceResult="PagedServiceResult" Context="DataResult">
            <ItemTemplate>
                <div>
                    @Template(DataResult)
                </div>
            </ItemTemplate>
        </PagedList>
    </div>

    @if (DataResultOptions is not null && FilterEditContext is not null)
    {
        @DataResultOptions(FilterEditContext)
    }
</section>

@code {
    [Inject]
    protected TApiService ApiService { get; set; } = default!;

    [Inject]
    protected DataController DataController { get; set; } = default!;

    [Inject]
    protected IFilterResultHelpers<TFilterResult, TFilterFormModel> FilterResultHelper { get; set; } = default!;

    [Parameter, EditorRequired]
    public EventCallback<bool> OnSelectDisplayStateChanged { get; set; }

    [Parameter, EditorRequired]
    public required RenderFragment Header { get; set; }

    [Parameter, EditorRequired]
    public required RenderFragment<TFilterFormModel> FilterInputs { get; set; }

    [Parameter, EditorRequired]
    public required RenderFragment<TDataResult> Template { get; set; }

    [Parameter]
    public RenderFragment<EditContext>? DataResultOptions { get; set; }

    [Parameter]
    public PagedServiceResult<IList<TDataResult>, TFilterResult>? PagedServiceResult { get; set; }
    [Parameter]
    public EventCallback<PagedServiceResult<IList<TDataResult>, TFilterResult>?> PagedServiceResultChanged { get; set; }
    private PagedServiceResult<IList<TDataResult>, TFilterResult>? CurrentPagedServiceResult
    {
        get => PagedServiceResult;
        set
        {
            if (PagedServiceResult != value)
            {
                PagedServiceResult = value;

                // FilterEditContext = new EditContext(FilterResultHelper.ToFormModel(PagedServiceResult?.Filter) ?? new TFilterFormModel { });

                PagedServiceResultChanged.InvokeAsync(value); // Notify parent of change
            }
        }
    }

    [Parameter]
    public EditContext? FilterEditContext { get; set; }

    private async Task<PagedServiceResult<IList<TDataResult>, TFilterResult>> FetchAll(PaginationRequest paginationRequest, TFilterRequest filterRequest)
    {
        var pagedServiceResult = await ApiService.GetAll(paginationRequest, filterRequest);
        // await OnPagedServiceResultChanged.InvokeAsync(pagedServiceResult);

        if (pagedServiceResult.Messages?.HasMessage is not true)
        {
            await OnSelectDisplayStateChanged.InvokeAsync(true);

        }

        FilterEditContext = new EditContext(FilterResultHelper.ToFormModel(pagedServiceResult.Filter));

        return pagedServiceResult;
    }

    private async Task HandleOnReset()
    {
        CurrentPagedServiceResult = await DataController.Fetch<PagedServiceResult<IList<TDataResult>, TFilterResult>>(async () => await FetchAll(MemoryService.GetDefaultPaginationRequest(), new TFilterRequest { }));
    }

    private async Task HandleOnValidSubmit()
    {
        if (FilterEditContext is null)
        {
            return;
        }

        if (FilterFormModelHelpers.ToRequest((TFilterFormModel)FilterEditContext.Model) is not { } filterRequest)
        {
            return;
        }

        CurrentPagedServiceResult = await DataController.Fetch<PagedServiceResult<IList<TDataResult>, TFilterResult>>(async () => await FetchAll(MemoryService.GetDefaultPaginationRequest(), filterRequest));
    }

    private async Task HandleOnPageChanged(PaginationRequest paginationRequest)
    {
        if (CurrentPagedServiceResult is null) return;

        CurrentPagedServiceResult = await DataController.Fetch<PagedServiceResult<IList<TDataResult>, TFilterResult>>(async () => await FetchAll(new PaginationRequest { Page = paginationRequest.Page, PageSize = paginationRequest.PageSize }, CurrentPagedServiceResult.Filter.ToRequest()));
    }



}
