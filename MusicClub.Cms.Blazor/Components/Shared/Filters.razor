@using MusicClub.Cms.Blazor.Helpers

@typeparam TFilterRequest where TFilterRequest : class, new()
@typeparam TFilterFormModel where TFilterFormModel : class, new()

@inject IFilterFormModelHelpers<TFilterRequest, TFilterFormModel> FilterFormModelHelpers

<section>
    @if (showFilters)
    {
        <h4><button @onclick="() => showFilters = false">Filters &#11205;</button></h4>

        <EditForm EditContext="EditContext"
                  OnValidSubmit="() => OnValidSubmit.InvokeAsync()">

            <DataAnnotationsValidator></DataAnnotationsValidator>
            <ValidationSummary></ValidationSummary>

            <div>
                @Inputs((TFilterFormModel)EditContext.Model)
            </div>

            <div class="buttons flex-end">
                <button type="button" @onclick="() => OnReset.InvokeAsync()">Clear</button>

                <button type="submit">Filter</button>
            </div>
        </EditForm>
    }
    else
    {
        <h4><button @onclick="() => showFilters = true">Filters &#11206;</button></h4>
    }

    @if (tags is not null && tags.Count > 0)
    {
        <ul class="tags">
            @foreach (var tag in tags)
            {
                <li>
                    <span>@tag.Key</span>

                    <button @onclick="@(async () => { tag.Value.Invoke(null); await OnValidSubmit.InvokeAsync(); })">x</button>
                </li>
            }
        </ul>
    }
</section>

@code {
    [Parameter, EditorRequired]
    public required RenderFragment<TFilterFormModel> Inputs { get; set; }

    [Parameter, EditorRequired]
    public EventCallback OnValidSubmit { get; set; }

    [Parameter, EditorRequired]
    public EventCallback OnReset { get; set; }

    [Parameter, EditorRequired]
    public required EditContext EditContext { get; set; }

    private bool showFilters { get; set; } = false;

    private Dictionary<string, Action<string?>>? tags;

    public override Task SetParametersAsync(ParameterView parameters)
    {
        var shouldGetTags = false;

        if (parameters.TryGetValue(nameof(EditContext), out EditContext? editContext))
        { 
            if (editContext != EditContext)
            {
                shouldGetTags = true;
            }
        }

        parameters.SetParameterProperties(this);

        if (shouldGetTags && (TFilterFormModel)EditContext.Model is { } filterFormModel)
        {
            tags = FilterFormModelHelpers.GetTags(filterFormModel);
        }

        return base.SetParametersAsync(ParameterView.Empty);
    }
}
