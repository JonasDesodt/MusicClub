@typeparam TDataRequest
@typeparam TDataResult where TDataResult : class
@typeparam TFilterRequest where TFilterRequest : class, new()
@typeparam TFilterResult where TFilterResult : class, IConvertToRequest<TFilterRequest>
@typeparam TApiService where TApiService : IService<TDataRequest, TDataResult, TFilterRequest, TFilterResult>
@typeparam TFilterFormModel where TFilterFormModel : class, new()

<DataResultIndex TDataRequest="TDataRequest"
       TDataResult="TDataResult"
       TFilterRequest="TFilterRequest"
       TFilterResult="TFilterResult"
       TApiService="TApiService"
       TFilterFormModel="TFilterFormModel" 
       OnSelectDisplayStateChanged="OnSelectDisplayStateChanged"
       Context="Context">
    <Header>
        <button @onclick="() => OnSelectDisplayStateChanged.InvokeAsync(false)" class="warning">&#128939;</button>

        <h3>Select @typeof(TDataResult).ToString().Replace("Result", string.Empty)</h3>
    </Header>

    <FilterInputs>
        @FilterInputs(Context)
    </FilterInputs>

    <Template>
        @Template(Context)
  </Template>
</DataResultIndex>


@code {
    [Parameter, EditorRequired]
    public EventCallback<bool> OnSelectDisplayStateChanged { get; set; }


    [Parameter, EditorRequired]
    public required RenderFragment<TFilterFormModel> FilterInputs { get; set; }

    [Parameter, EditorRequired]
    public required RenderFragment<TDataResult> Template { get; set; }
}